import logging
import json
import random
import re
import smtplib
from datetime import datetime
from email.mime.text import MIMEText
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv
import os

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')
EMAIL_SENDER = os.getenv('EMAIL_SENDER')
EMAIL_PASSWORD = os.getenv('EMAIL_PASSWORD')
ADMINS = [1371340477, 812859554]  # ‚Üê –£–∫–∞–∂–∏ —Å–≤–æ–∏ Telegram ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


class Order(StatesGroup):
    waiting_for_email = State()
    confirming_email = State()
    waiting_for_payment = State()


def load_products():
    with open("data/products.json", "r", encoding="utf-8") as f:
        return json.load(f)


def save_order(order):
    try:
        with open("data/orders.json", "r", encoding="utf-8") as f:
            orders = json.load(f)
    except FileNotFoundError:
        orders = []

    orders.append(order)
    with open("data/orders.json", "w", encoding="utf-8") as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)


def generate_order_id():
    return random.randint(100000, 999999)


# --- –°–¢–ê–†–¢: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    products = load_products()
    keyboard = types.InlineKeyboardMarkup()
    for i, category in enumerate(products):
        keyboard.add(types.InlineKeyboardButton(
            text=category['category'],
            callback_data=f"category_{i}"
        ))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–∏–ª–µ—Ç–∞:", reply_markup=keyboard)


# --- –í—ã–±–æ—Ä –ø–æ–¥—Ç–æ–≤–∞—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
@dp.callback_query_handler(lambda c: c.data.startswith("category_"))
async def select_category(callback_query: types.CallbackQuery, state: FSMContext):
    category_index = int(callback_query.data.split("_")[1])
    products = load_products()
    category = products[category_index]

    await state.update_data(category_index=category_index)

    keyboard = types.InlineKeyboardMarkup()
    for i, item in enumerate(category["items"]):
        keyboard.add(types.InlineKeyboardButton(
            text=f"{item['name']} ‚Äî {item['price'] // 100}‚ÇΩ",
            callback_data=f"product_{i}"
        ))

    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category['category']}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",
        reply_markup=keyboard
    )
    await callback_query.answer()


# --- –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ ---
@dp.callback_query_handler(lambda c: c.data.startswith("product_"))
async def select_product(callback_query: types.CallbackQuery, state: FSMContext):
    product_index = int(callback_query.data.split("_")[1])
    data = await state.get_data()
    category_index = data["category_index"]

    products = load_products()
    product = products[category_index]["items"][product_index]

    await state.update_data(product=product)
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await Order.waiting_for_email.set()
    await callback_query.answer()


# --- –í–≤–æ–¥ email ---
@dp.message_handler(state=Order.waiting_for_email)
async def enter_email(message: types.Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")
        return

    await state.update_data(email=email)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email", callback_data="confirm_email"))
    keyboard.add(types.InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="edit_email"))

    await message.answer(
        f"–í—ã –≤–≤–µ–ª–∏: **{email}**\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await Order.confirming_email.set()

    # --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ email ---
    @dp.callback_query_handler(lambda c: c.data == "edit_email", state=Order.confirming_email)
    async def edit_email(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
        await Order.waiting_for_email.set()
        await callback_query.answer()

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email –∏ –æ–ø–ª–∞—Ç–∞ ---
    @dp.callback_query_handler(lambda c: c.data == "confirm_email", state=Order.confirming_email)
    async def confirm_email(callback_query: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        product = data['product']
        email = data['email']
        order_id = generate_order_id()

        await state.update_data(order_id=order_id)

        await bot.send_invoice(
            chat_id=callback_query.from_user.id,
            title=product["name"],
            description=product["description"],
            payload=str(order_id),
            provider_token=PAYMENT_PROVIDER_TOKEN,
            currency="RUB",
            prices=[types.LabeledPrice(label=product["name"], amount=product["price"])]
        )

        await Order.waiting_for_payment.set()
        await callback_query.answer()

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π ---
    @dp.pre_checkout_query_handler(lambda query: True)
    async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã ---
    @dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT, state=Order.waiting_for_payment)
    async def process_payment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        product = data['product']
        email = data['email']
        order_id = data['order_id']
        total = message.successful_payment.total_amount // 100

        order = {
            "order_id": order_id,
            "email": email,
            "item": product['name'],
            "price": total,
            "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        save_order(order)

        try:
            msg = MIMEText(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}\n"
                f"–¢–æ–≤–∞—Ä: {product['name']}\n"
                f"–°—É–º–º–∞: {total}‚ÇΩ"
            )
            msg["Subject"] = f"–ß–µ–∫ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}"
            msg["From"] = EMAIL_SENDER
            msg["To"] = email

            with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                server.login(EMAIL_SENDER, EMAIL_PASSWORD)
                server.send_message(msg)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {e}")

        await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_id}")
        await state.finish()

    # --- –ê–¥–º–∏–Ω–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ ---
    @dp.message_handler(commands=['admin'])
    async def admin_view(message: types.Message):
        if message.from_user.id not in ADMINS:
            await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return

        try:
            with open("data/orders.json", "r", encoding="utf-8") as f:
                orders = json.load(f)
        except FileNotFoundError:
            await message.answer("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        if not orders:
            await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return

        for order in orders[-10:]:
            text = (
                f"üì¶ –ó–∞–∫–∞–∑ #{order['order_id']}\n"
                f"üìß Email: {order['email']}\n"
                f"üéü –¢–æ–≤–∞—Ä: {order['item']}\n"
                f"üí∞ –°—É–º–º–∞: {order['price']}‚ÇΩ\n"
                f"üïí –í—Ä–µ–º—è: {order['time']}"
            )
            await message.answer(text)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)